
I2MIDI_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000204  00800100  00800100  0000025e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1c  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000936  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000402  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050f  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000298  00000000  00000000  0000234b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000025e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_18>
  4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_19>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	e4 00       	.word	0x00e4	; ????

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 30       	cpi	r26, 0x04	; 4
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	c5 e3       	ldi	r28, 0x35	; 53
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	21 97       	sbiw	r28, 0x01	; 1
  90:	fe 01       	movw	r30, r28
  92:	0e 94 ed 00 	call	0x1da	; 0x1da <__tablejump2__>
  96:	c4 33       	cpi	r28, 0x34	; 52
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  a0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <main>:

#include "Includes.h"


int main(void)
{
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <main>

000000aa <_ZN10RingBufferC1Ev>:
 */ 

#include "Includes.h"

RingBuffer::RingBuffer(){
	tail = 0;
  aa:	fc 01       	movw	r30, r24
  ac:	ef 5f       	subi	r30, 0xFF	; 255
  ae:	fe 4f       	sbci	r31, 0xFE	; 254
  b0:	10 82       	st	Z, r1
	head = 0;
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	10 82       	st	Z, r1
  b6:	08 95       	ret

000000b8 <_ZN10RingBuffer4ReadEv>:
		buffer[head] = in;
	}
}

uint8_t RingBuffer::Count(){
	return head - tail;
  b8:	fc 01       	movw	r30, r24
  ba:	ef 5f       	subi	r30, 0xFF	; 255
  bc:	fe 4f       	sbci	r31, 0xFE	; 254
  be:	20 81       	ld	r18, Z
  c0:	31 97       	sbiw	r30, 0x01	; 1
	tail = 0;
	head = 0;
}

uint8_t RingBuffer::Read(){
	if (Count() > 0)
  c2:	30 81       	ld	r19, Z
  c4:	32 17       	cp	r19, r18
  c6:	41 f0       	breq	.+16     	; 0xd8 <_ZN10RingBuffer4ReadEv+0x20>
	{
		tail++;
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	31 96       	adiw	r30, 0x01	; 1
  cc:	20 83       	st	Z, r18
		return buffer[tail];
  ce:	fc 01       	movw	r30, r24
  d0:	e2 0f       	add	r30, r18
  d2:	f1 1d       	adc	r31, r1
  d4:	80 81       	ld	r24, Z
  d6:	08 95       	ret
	}
	return 0;
  d8:	80 e0       	ldi	r24, 0x00	; 0
}
  da:	08 95       	ret

000000dc <_ZN10RingBuffer5WriteEh>:
		buffer[head] = in;
	}
}

uint8_t RingBuffer::Count(){
	return head - tail;
  dc:	fc 01       	movw	r30, r24
  de:	f3 95       	inc	r31
  e0:	20 81       	ld	r18, Z
  e2:	31 96       	adiw	r30, 0x01	; 1
	}
	return 0;
}

void RingBuffer::Write(uint8_t in){
	if (Count() < 255)
  e4:	30 81       	ld	r19, Z
  e6:	42 2f       	mov	r20, r18
  e8:	43 1b       	sub	r20, r19
  ea:	4f 3f       	cpi	r20, 0xFF	; 255
  ec:	39 f0       	breq	.+14     	; 0xfc <_ZN10RingBuffer5WriteEh+0x20>
	{
		head++;
  ee:	2f 5f       	subi	r18, 0xFF	; 255
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	20 83       	st	Z, r18
		buffer[head] = in;
  f4:	fc 01       	movw	r30, r24
  f6:	e2 0f       	add	r30, r18
  f8:	f1 1d       	adc	r31, r1
  fa:	60 83       	st	Z, r22
  fc:	08 95       	ret

000000fe <_ZN10RingBuffer5CountEv>:
	}
}

uint8_t RingBuffer::Count(){
	return head - tail;
  fe:	dc 01       	movw	r26, r24
 100:	b3 95       	inc	r27
 102:	fc 01       	movw	r30, r24
 104:	ef 5f       	subi	r30, 0xFF	; 255
 106:	fe 4f       	sbci	r31, 0xFE	; 254
 108:	8c 91       	ld	r24, X
 10a:	90 81       	ld	r25, Z
}
 10c:	89 1b       	sub	r24, r25
 10e:	08 95       	ret

00000110 <__vector_18>:
	
	//Enable interrupt
	UCSR0B |= 1 << UDRIE0;
}

ISR(USART_RX_vect){
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	uint8_t rx = UDR0;
 132:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	bufferUART_RX.Write(rx);
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN10RingBuffer5WriteEh>
}
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_19>:

ISR(USART_UDRE_vect){
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
	if (bufferUART_TX.Count() > 0)
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	0e 94 7f 00 	call	0xfe	; 0xfe <_ZN10RingBuffer5CountEv>
 18a:	88 23       	and	r24, r24
 18c:	39 f0       	breq	.+14     	; 0x19c <__vector_19+0x3c>
	{
		UDR0 = bufferUART_TX.Read();
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 5c 00 	call	0xb8	; 0xb8 <_ZN10RingBuffer4ReadEv>
 196:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <__vector_19+0x46>
	} else {
		//Disable interrupt if send register is empty
		UCSR0B &= ~(1 << UDRIE0);
 19c:	e1 ec       	ldi	r30, 0xC1	; 193
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	8f 7d       	andi	r24, 0xDF	; 223
 1a4:	80 83       	st	Z, r24
	}
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	bf 91       	pop	r27
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <_GLOBAL__sub_I_bufferUART_RX>:
 *  Author: mikda
 */ 

#include "Includes.h"

RingBuffer bufferUART_RX;
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN10RingBufferC1Ev>
RingBuffer bufferUART_TX;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN10RingBufferC1Ev>
 1d8:	08 95       	ret

000001da <__tablejump2__>:
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	05 90       	lpm	r0, Z+
 1e0:	f4 91       	lpm	r31, Z
 1e2:	e0 2d       	mov	r30, r0
 1e4:	09 94       	ijmp

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
